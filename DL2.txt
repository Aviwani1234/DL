import tensorflow as tf
from tensorflow import keras
import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
%matplotlib inline

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

plt.matshow(x_train[1])

x_train = x_train/255
x_test = x_test/255

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])
model.summary()

model.compile(optimizer="sgd",
loss = "sparse_categorical_crossentropy",
metrics=['Accuracy'])

history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10)

test_loss, test_acc = model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy=%.3f" %test_acc)

n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()

predicted_value = model.predict(x_test)
plt.imshow(x_test[n])
plt.show()
print(predicted_value[n])

history.history.keys()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title("Model loss")
plt.ylabel("loss")
plt.xlabel("epochs")
plt.legend(["train","test"], loc = "upper right")
plt.show()

history.history.keys()
plt.plot(history.history['Accuracy'])
plt.plot(history.history['val_Accuracy'])
plt.title("Model accuracy")
plt.ylabel("accuracy")
plt.xlabel("epochs")
plt.legend(["train","test"], loc = "upper left")
plt.show()